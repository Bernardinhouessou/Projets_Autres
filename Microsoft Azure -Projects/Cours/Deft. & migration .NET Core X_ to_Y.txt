https://dotnet.microsoft.com/

https://www.syncfusion.com/kb/10301/how-to-convert-html-to-pdf-in-azure-functions-2-0
https://www.syncfusion.com/kb/aspnetcore

ORDRE DES SORTIES:

*3.1.2 (18 février 2020) 
*3.1.0-preview1 (15 octobre 2019) -
*3.0.0 (23 septembre 2019)- 3 mars 2020
*.NET Core 2.2 	Fin de vie le 23 décembre 2019.
*.NET Core 2.1 	Fin de vie le 21 août 2021.

https://docs.microsoft.com/fr-fr/dotnet/core/whats-new/dotnet-core-3-1
https://www.c-sharpcorner.com/article/difference-between-net-framework-and-net-core/

Q:A QUOI SERT .NET CORE ?

R: -------------------------------------------------------------------
.NET Core est une plateforme de développement généraliste open source 
qui est tenue à jour par Microsoft et la communauté .NET sur GitHub. 
Cette multiplateforme prend en charge Windows, macOS et Linux.
Elle permet de générer des applications destinées à des appareils
, au cloud et à l’Internet des objets.

Consultez À propos de .NET Core pour en savoir plus sur .NET Core, notamment ses caractéristiques, les langues et frameworks pris en charge et les API clés.

-------------------------------------------------------------------
https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-3.1&tabs=visual-studio
https://docs.microsoft.com/en-us/aspnet/core/migration/30-to-31?view=aspnetcore-3.1&tabs=visual-studio
https://docs.microsoft.com/en-us/aspnet/core/migration/21-to-22?view=aspnetcore-3.1&tabs=visual-studio
https://docs.microsoft.com/en-us/aspnet/core/migration/20_21?view=aspnetcore-3.1
https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/?view=aspnetcore-3.1


À propos de .NET Core

    17/09/2019
    7 minutes de lecture

.NET Core a les caractéristiques suivantes :

    Plateforme croisée : S’exécute sur windows, macOS, et les systèmes d’exploitationLinux .
    Cohérent entre architectures : Exécute votre code avec le même comportement sur plusieurs architectures, notamment x64, x86 et ARM.
    Outils de ligne de commande : Intègre des outils de ligne de commande faciles qui peuvent être utilisés pour le développement local et dans des scénarios d’intégration continue.
    Déploiement flexible : Peut être inclus dans votre application ou installé côte à côte (installations à l’échelle de l’utilisateur ou à l’échelle du système). Peut être utilisé avec des conteneurs Docker.
    Compatible: .NET Core est compatible avec .NET Framework, Xamarin, et Mono, via .NET Standard.
    Open Source : la plateforme .NET Core est open source et utilise des licences MIT et Apache 2. .NET Core est un projet .NET Foundation.
    Pris en charge par Microsoft : Le .NET Core est pris en charge par Microsoft, via le Support .NET Core.

Languages

Vous pouvez utiliser les langages C#, Visual Basic et F# pour écrire des applications et des bibliothèques pour .NET Core. Ces langues peuvent être utilisées dans votre éditeur de texte préféré ou environnement de développement intégré (IDE), y compris :

    Studio visuel
    Code de studio visuel
    Sublime Text
    Vim

Cette intégration est assurée, en partie, par les contributeurs des projets OmniSharp et Ionide.
API

.NET Core expose des API pour de nombreux scénarios, en voici quelques-uns :

    Types primitifs, tels que System.Boolean et System.Int32.
    Collections, comme System.Collections.Generic.List<T> et System.Collections.Generic.Dictionary<TKey,TValue>.
    Types d’utilitaire, comme System.Net.Http.HttpClient et System.IO.FileStream.
    Types de données, comme System.Data.DataSet et DbSet.
    Types de haute performance, tels que System.Numerics.Vector et pipelines.

.NET Core assure la compatibilité avec les API .NET Framework et Mono en implémentant la spécification .NET Standard.
Frameworks

Plusieurs frameworks ont été construits à partir de .NET Core :

    ASP.NET Core
    Plateforme Windows universelle (UWP) Windows 10
    Tizen

Composition

.NET Core est constitué des composants suivants :

    Le runtime .NET Core, qui fournit un système de type, le chargement d’assemblage, un éboueur, interop natif, et d’autres services de base. .NET Les bibliothèques-cadres de base fournissent des types de données primitifs, des types de composition d’applications et des services publics fondamentaux.
    Le ASP.NET Core runtime, qui fournit un cadre pour la construction d’applications modernes connectées à Internet basées sur le cloud, telles que les applications Web, les applications IoT et les backends mobiles.
    Le .NET Core SDK et les compilateurs de langue (Roslyn et F )qui permettent l’expérience développeur .NET Core.
    La commande dotnet, qui est utilisé pour lancer des applications .NET Core et des commandes CLI. Il sélectionne l’heure d’exécution et héberge l’heure d’exécution, fournit une stratégie de chargement d’assemblage et lance des applications et des outils.

Ces composants sont distribués de la façon suivante :

    Runtime .NET Core : inclut le runtime .NET Core et des bibliothèques de framework.
    Runtime ASP.NET Core : inclut le runtime ASP.NET Core et .NET Core, et des bibliothèques de framework.
    .NET Core SDK -- comprend le .NET Core CLI, ASP.NET Core runtime, et .NET Core runtime et cadre.

Open source

.NET Core est open source (licence MIT) et a été introduit dans .NET Foundation par Microsoft en 2014. C’est maintenant l’un des projets les plus actifs de la Fondation NET. Il peut être utilisé par des particuliers et des entreprises, y compris à des fins personnelles, académiques ou commerciales. Plusieurs entreprises utilisent .NET Core dans le cadre d’applications, d’outils, de nouvelles plates-formes et de services d’hébergement. Certaines de ces sociétés contribuent de façon significative à .NET Core sur GitHub et fournissent des conseils sur l’orientation des produits dans le cadre du groupe de travail appelé le .NET Foundation Technical Steering Group.
Conçu pour l’adaptabilité

.NET Core a été construit comme un produit similaire mais unique par rapport à d’autres produits .NET. Il a été conçu pour permettre une large adaptabilité aux nouvelles plates-formes et charges de travail et il dispose de plusieurs ports OS et CPU disponibles (et il peut être porté à beaucoup plus).

Le produit est divisé en plusieurs composants, ce qui permet d’adapter les différentes parties à de nouvelles plateformes, à différents moments. Le runtime et les bibliothèques de base spécifiques à la plateforme doivent être portés individuellement. Les bibliothèques indépendantes de la plateforme doivent fonctionner en l’état sur toutes les plateformes, de par leur construction. Il y a un biais de projet vers la réduction des implémentations spécifiques à la plate-forme afin d’accroître l’efficacité des développeurs, préférant le code Cmd neutre sur la plate-forme chaque fois qu’un algorithme ou un API peut être implémenté de cette façon.

Il est fréquent que des personnes s’interrogent sur la façon dont .NET Core est implémenté afin de prendre en charge plusieurs systèmes d’exploitation. Elles demandent généralement s’il existe des implémentations distinctes ou si la compilation conditionnelle est utilisée. La réponse est les deux à la fois, avec une forte préférence pour la compilation conditionnelle.

Vous pouvez voir dans le tableau suivant que la grande majorité des bibliothèques .NET Core est un code neutre sur la plate-forme qui est partagé sur toutes les plates-formes. Le code indépendant de la plateforme peut être implémenté en tant qu’assembly portable unique et utilisé sur toutes les plateformes.